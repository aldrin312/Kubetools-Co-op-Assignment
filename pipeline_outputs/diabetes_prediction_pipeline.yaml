# PIPELINE DEFINITION
# Name: diabetes-prediction-pipeline
# Description: A pipeline for training and optimizing a diabetes prediction model
components:
  comp-hyperparameter-tuning:
    executorLabel: exec-hyperparameter-tuning
    inputDefinitions:
      parameters:
        X_scaled_csv:
          parameterType: STRING
        best_model_output:
          parameterType: STRING
        model_input:
          parameterType: STRING
        n_trials:
          defaultValue: 10.0
          isOptional: true
          parameterType: NUMBER_INTEGER
        y:
          parameterType: LIST
  comp-preprocess-data:
    executorLabel: exec-preprocess-data
    outputDefinitions:
      parameters:
        output_X_scaled_csv:
          parameterType: STRING
        output_scaler:
          parameterType: STRING
        output_y:
          parameterType: LIST
  comp-train-and-evaluate:
    executorLabel: exec-train-and-evaluate
    inputDefinitions:
      parameters:
        X_scaled_csv:
          parameterType: STRING
        model_output:
          parameterType: STRING
        y:
          parameterType: LIST
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-hyperparameter-tuning:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - hyperparameter_tuning
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef hyperparameter_tuning(X_scaled_csv: str, y: list, model_input:\
          \ str, best_model_output: str, n_trials: int = 10):\n    # Load the trained\
          \ model from the model_training output\n    model = joblib.load(model_input)\n\
          \    X_scaled = pd.read_csv(X_scaled_csv)\n    y = pd.Series(y)\n\n    #\
          \ Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X_scaled,\
          \ y, test_size=0.2, random_state=42)\n\n    # Optuna objective function\
          \ for tuning the hyperparameters\n    def objective(trial):\n        learning_rate\
          \ = trial.suggest_loguniform('learning_rate', 0.001, 0.1)\n        max_depth\
          \ = trial.suggest_int('max_depth', 3, 10)\n\n        # Initialize the model\
          \ with hyperparameters\n        tuned_model = GradientBoostingClassifier(learning_rate=learning_rate,\
          \ max_depth=max_depth, random_state=42)\n        tuned_model.fit(X_train,\
          \ y_train)\n\n        # Evaluate the model\n        y_prob = tuned_model.predict_proba(X_test)[:,\
          \ 1]\n        roc_auc = roc_auc_score(y_test, y_prob)\n\n        return\
          \ roc_auc\n\n    # Set up Optuna study and optimize the objective\n    study\
          \ = optuna.create_study(direction='maximize')\n    study.optimize(objective,\
          \ n_trials=n_trials)\n\n    # Log the best parameters and score\n    print(f\"\
          Best Parameters: {study.best_params}\")\n    print(f\"Best ROC AUC: {study.best_value:.4f}\"\
          )\n\n    # Save the best model\n    best_params = study.best_params\n  \
          \  best_model = GradientBoostingClassifier(**best_params, random_state=42)\n\
          \    best_model.fit(X_train, y_train)\n    joblib.dump(best_model, best_model_output)\n\
          \n    return best_params, study.best_value\n\n"
        image: python:3.10
    exec-preprocess-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - preprocess_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef preprocess_data(\n    output_X_scaled_csv: kfp.dsl.OutputPath(str),\
          \ # type: ignore\n    output_scaler: kfp.dsl.OutputPath(str), # type: ignore\n\
          \    output_y: kfp.dsl.OutputPath(list) # type: ignore\n):\n    df1 = pd.read_csv('./models/diabetes.csv')\
          \  \n    df2 = pd.read_csv('./models/diabetes2.csv')  \n\n    # Combine\
          \ the datasets\n    df = pd.concat([df1, df2], ignore_index=True)\n\n  \
          \  # Drop target column and normalize the features\n    X = df.drop(columns=['Diabetic'])\n\
          \    y = df['Diabetic']\n\n    # Normalize data using MinMaxScaler\n   \
          \ scaler = MinMaxScaler()\n    X_scaled = scaler.fit_transform(X)\n\n  \
          \  # Save the scaler for later use\n    joblib.dump(scaler, '/tmp/scaler.pkl')\n\
          \    output_scaler.set('/tmp/scaler.pkl')\n\n    # Save scaled data\n  \
          \  X_scaled_df = pd.DataFrame(X_scaled, columns=X.columns)\n    X_scaled_df.to_csv('/tmp/X_scaled.csv',\
          \ index=False)\n    output_X_scaled_csv.set('/tmp/X_scaled.csv')\n\n   \
          \ # Set the target variable output\n    output_y.set(y.to_list())\n\n"
        image: python:3.10
    exec-train-and-evaluate:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_and_evaluate
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_and_evaluate(X_scaled_csv: str, y: list, model_output:\
          \ str) -> str:\n    # Read the input data\n    X_scaled = pd.read_csv(X_scaled_csv)\n\
          \    y = pd.Series(y)\n\n    # Train-test split\n    X_train, X_test, y_train,\
          \ y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n\
          \n    # Train GradientBoosting model\n    model = GradientBoostingClassifier(random_state=42)\n\
          \    model.fit(X_train, y_train)\n\n    # Evaluate the model\n    y_pred\
          \ = model.predict(X_test)\n    y_prob = model.predict_proba(X_test)[:, 1]\n\
          \    accuracy = accuracy_score(y_test, y_pred)\n    roc_auc = roc_auc_score(y_test,\
          \ y_prob)\n\n    print(f\"Accuracy: {accuracy:.4f}\")\n    print(f\"ROC\
          \ AUC: {roc_auc:.4f}\")\n\n    # Save the model\n    joblib.dump(model,\
          \ model_output)\n\n    # Return the model output file path\n    return model_output\n\
          \n"
        image: python:3.10
pipelineInfo:
  description: A pipeline for training and optimizing a diabetes prediction model
  name: diabetes-prediction-pipeline
root:
  dag:
    tasks:
      hyperparameter-tuning:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-hyperparameter-tuning
        dependentTasks:
        - preprocess-data
        - train-and-evaluate
        inputs:
          parameters:
            X_scaled_csv:
              taskOutputParameter:
                outputParameterKey: output_X_scaled_csv
                producerTask: preprocess-data
            best_model_output:
              runtimeValue:
                constant: /tmp/best_model.pkl
            model_input:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: train-and-evaluate
            y:
              taskOutputParameter:
                outputParameterKey: output_y
                producerTask: preprocess-data
        taskInfo:
          name: hyperparameter-tuning
      preprocess-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-preprocess-data
        taskInfo:
          name: preprocess-data
      train-and-evaluate:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-and-evaluate
        dependentTasks:
        - preprocess-data
        inputs:
          parameters:
            X_scaled_csv:
              taskOutputParameter:
                outputParameterKey: output_X_scaled_csv
                producerTask: preprocess-data
            model_output:
              runtimeValue:
                constant: /tmp/model.pkl
            y:
              taskOutputParameter:
                outputParameterKey: output_y
                producerTask: preprocess-data
        taskInfo:
          name: train-and-evaluate
schemaVersion: 2.1.0
sdkVersion: kfp-2.12.1
